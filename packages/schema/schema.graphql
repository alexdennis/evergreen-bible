"e.g. en-US. See https://tools.ietf.org/rfc/bcp/bcp47.txt"
scalar LocaleString
"Uniform Resource Locator. See https://datatracker.ietf.org/doc/html/rfc1738"
scalar URL

enum SortOrderOptions {
  ASC
  DESC
}

type Query {
  locales: ListOfLocales!
  books(locale: LocaleString!, filter: BooksSearchFilterInput): ListOfBooks!
  textSearch (locale: LocaleString!, text: TextSearchInput!): SearchResult!
  imageSearch (locale: LocaleString!, image: ImageSearchInput!): SearchResult!
  audioSearch (locale: LocaleString!, audio: AudioSearchInput!): SearchResult! 
}

type Book {
  id: ID!
  name: String!
  chapters(after: String, first: Int, sortOrder: SortOrderOptions = ASC): ListOfChapters!
  locale: Locale!
}

type Chapter {
  id: ID!
  book: Book!
  number: Int!
  verses(after: String, first: Int, sortOrder: SortOrderOptions = ASC): ListOfVerses!
  locale: Locale!
}

type Verse {
  id: ID!
  number: Int!
  text: String!
  chapter: Chapter!
  book: Book!
  locale: Locale!
  speech: URL!
}

type Locale {
  id: ID!
  name: LocaleString!
  mapCoords: [MapCoord!]!
}

type MapCoord {
  lat: Number!
  lng: Number!
}

union SearchResult = ListOfVerses | SearchError

type SearchError {
  message: String!
  speech: URL!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
}

type ListOfBooks {
  edges: [BookEdge!]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type BookEdge {
  node: Book!
  cursor: String!
}

type ListOfChapters {
  edges: [ChapterEdge!]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type ChapterEdge {
  node: Chapter!
  cursor: String!
}

type ListOfVerses {
  edges: [VerseEdge!]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type VerseEdge {
  node: Verse!
  cursor: String!
}

type ListOfLocales {
  edges: [LocaleEdge!]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type LocaleEdge {
  node: Locale!
  cursor: String!
}

input BooksSearchFilterInput {
  after: String
  first: Int
  sortOrder: SortOrderOptions = ASC
}

input TextSearchInput {
  text: String!
  after: String
  first: Int
  sortOrder: SortOrderOptions = ASC
}

input ImageSearchInput {
  "Image URL required if no `imageData`"
  imageUrl: URL
  "Image data required if no `imageUrl`. Image data needs to be base64 encoded"
  imageData: String
  after: String
  first: Int
  sortOrder: SortOrderOptions = ASC
}

input AudioSearchInput {
  "Audio URL required if no `audioData`"
  audioUrl: URL
  "Audio data required if no `audioUrl`. Audio data needs to be base64 encoded"
  audioData: String
  after: String
  first: Int
  sortOrder: SortOrderOptions = ASC
}
